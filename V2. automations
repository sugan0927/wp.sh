#!/bin/bash

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit
fi

# Prompt user for domain name
read -p "Enter your domain name (e.g., example.com): " DOMAIN

# Define variables
DB_NAME="wordpress_db"
DB_USER="wordpress_user"
DB_PASSWORD=$(openssl rand -base64 12)
WEB_ROOT="/var/www/html/$DOMAIN"
WP_VERSION="latest"

# Update the system
apt update
apt upgrade -y

# Install required packages
apt install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-intl php-mbstring php-xml php-xmlrpc php-zip certbot python3-certbot-nginx fail2ban

# Secure MariaDB installation
mysql_secure_installation

# Create a new MariaDB database and user
mysql -u root -p <<MYSQL_SCRIPT
CREATE DATABASE $DB_NAME;
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
#!/bin/bash

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit
fi

# Prompt user for domain name
read -p "Enter your domain name (e.g., example.com): " DOMAIN

# Define variables
DB_NAME="wordpress_db"
DB_USER="wordpress_user"
DB_PASSWORD=$(openssl rand -base64 12)
WEB_ROOT="/var/www/html/$DOMAIN"
WP_VERSION="latest"

# Update the system
apt update
apt upgrade -y

# Install required packages
apt install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-intl php-mbstring php-xml php-xmlrpc php-zip certbot python3-certbot-nginx fail2ban

# Secure MariaDB installation
mysql_secure_installation

# Create a new MariaDB database and user
mysql -u root -p <<MYSQL_SCRIPT
CREATE DATABASE $DB_NAME;
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
FLUSH PRIVILEGES;
MYSQL_SCRIPT

# Download and configure WordPress
cd /tmp
curl -O https://wordpress.org/latest.tar.gz
tar -zxvf latest.tar.gz
cp -r /tmp/wordpress/* $WEB_ROOT

# Generate Nginx server block
cat <<EOL > /etc/nginx/sites-available/$DOMAIN
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;

    root $WEB_ROOT;
    index index.php;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock; # Use the correct PHP version
    }

    location ~ /\.ht {
        deny all;
    }

    location = /favicon.ico { log_not_found off; access_log off; }
    location = /robots.txt { log_not_found off; access_log off; }

    location ~* \.(css|js|gif|jpeg|jpg|png|woff|woff2|ttf|svg|eot)$ {
        expires max;
        log_not_found off;
    }

    location ~ /\.well-known/acme-challenge {
        allow all;
    }
}
EOL

# Enable the Nginx server block
ln -s /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/

# Test Nginx configuration and restart
nginx -t
systemctl restart nginx

# Install Let's Encrypt SSL certificate
certbot --nginx -d $DOMAIN -d www.$DOMAIN

# Create WordPress configuration file
cp $WEB_ROOT/wp-config-sample.php $WEB_ROOT/wp-config.php

# Generate WordPress salts and replace them in wp-config.php
SALTS=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)
sed -i "/AUTH_KEY/s/put your unique phrase here/$(echo $SALTS | sed 's/\//\\\//g')/" $WEB_ROOT/wp-config.php

# Set database credentials in wp-config.php
sed -i "s/database_name_here/$DB_NAME/" $WEB_ROOT/wp-config.php
sed -i "s/username_here/$DB_USER/" $WEB_ROOT/wp-config.php
sed -i "s/password_here/$DB_PASSWORD/" $WEB_ROOT/wp-config.php

# Restart PHP-FPM
systemctl restart php7.4-fpm # Use the correct PHP version

# Secure the server with Fail2Ban
cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
systemctl restart fail2ban

# Cleanup
rm -rf /tmp/wordpress
rm /tmp/latest.tar.gz

# Display information
echo "WordPress installation is complete. You can access your site at http://$DOMAIN"
echo "Database Name: $DB_NAME"
echo "Database User: $DB_USER"
echo "Database Password: $DB_PASSWORD"
ï¿¼Enter
